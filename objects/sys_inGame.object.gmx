<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/// Reset
scr_gameReset();


/// Set Mob Gen
alarm[0] = room_speed * 6;
alarm[1] = room_speed * 6;

/// Set Cycle
alarm[2] = room_speed * cycle_dayLength;
alarm[4] = room_speed * 3;


/// Save Point
game_tryTotal += 1;
var system_save = ds_map_secure_load(saveFile);

system_save[? "file_tryTotal"] = game_tryTotal;
ds_map_secure_save(system_save, saveFile); 
ds_map_destroy(system_save);


/// Set Surface
cycle_surface = surface_create(game_width, game_height);
surface_set_target(cycle_surface);
draw_clear_alpha(c_black, 0);
surface_reset_target();


/// Enemy Grid
var grid_size = 32;
enemy_grid = mp_grid_create(0, 0, room_width div grid_size + 1, room_height + 1 div grid_size, grid_size, grid_size);
mp_grid_add_instances(enemy_grid, obj_block, 0);


/// Play BGM
audio_play_sound(bgm_inGame1, 0, 1);


/// Create
instance_create(obj_chr.x, 0, camera);


/// Transition Effect
instance_create(0, 0, eft_roomCircle);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/// Recovery!
chr_hp += 1;
hp_size = 0.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (cycle_textAlpha &gt; 0)
{
    /// Cycle Text Alpha
    cycle_textAlpha -= 0.01;
    alarm[5] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/// Show Cycle Text
cycle_textAlpha = 1;
alarm[5] = room_speed * 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (cycle_alpha &gt; 0)
{
    /// Sun Rise  
    alarm[3] = 1;
    
    if (cycle_day &gt;= cycle_dayMax)
    {        
        /// Spawn Boss
        if (enemy_boss == 0)
        {
            scr_bossSpawn(game_campStage, irandom(3));
            enemy_boss = 1;
        }
        
        /// Enter Boss Room
        if (instance_number(enemy) == 0 &amp;&amp; instance_number(sys_gameClear) == 0)
        {
            var a = instance_create(0, 0, sys_gameClear);
            a.color = c_black;
            a.fade_speed = 0.002;
            alarm[3] = 0;
        }
    }
    else
    {
        cycle_alpha -= 0.002;
    }
}
else
{
    /// Set Night
    cycle_day += 1;
    alarm[2] = room_speed * cycle_dayLength;
    alarm[4] = room_speed; 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (cycle_alpha &lt; cycle_alphaMax)
{
    /// Come Dark
    cycle_alpha += 0.001;
    alarm[2] = 1;
}
else
{
    /// Set Sun
    alarm[3] = room_speed * cycle_nightLength;    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/// Create DropBox
var rx = irandom_range(64, room_width - 64);

var a = instance_create(rx, 0, obj_dropbox);
with(a)
{
    tx = x;
    ty = irandom_range(64, room_height - 64);
    
    /// Warning Coding
    while(place_meeting(tx, ty, obj_block))
    {
        ty = irandom_range(64, room_height - 64);
    }
    drop_speed = choose(2, 3);
    
    /// Create DropBox Shadow
    var b = instance_create(tx, ty, obj_db_shadow);
    b.iid = id;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/// Create Enemy
repeat(cycle_day * 2 + 3)
{
    var r = irandom(3);
    
    switch(r)
    {
        case 0:
            instance_create(irandom(room_width), 0, obj_melee1);
            break;
            
        case 1:
            instance_create(room_width, irandom(room_height), obj_melee1);
            break;
            
        case 2:
            instance_create(irandom(room_width), room_height, obj_melee1);
            break;
            
        case 3:
            instance_create(0, irandom(room_height), obj_melee1);
            break;
    }
}

repeat(cycle_day + 3)
{
    var r = irandom(3);
    
    switch(r)
    {
        case 0:
            instance_create(irandom(room_width), 0, obj_carry1);
            break;
            
        case 1:
            instance_create(room_width, irandom(room_height), obj_carry1);
            break;
            
        case 2:
            instance_create(irandom(room_width), room_height, obj_carry1);
            break;
            
        case 3:
            instance_create(0, irandom(room_height), obj_carry1);
            break;
    }
}

repeat(cycle_day)
{
    var r = irandom(3);
    
    switch(r)
    {
        case 0:
            instance_create(irandom(room_width), 0, obj_melee2);
            break;
            
        case 1:
            instance_create(room_width, irandom(room_height), obj_melee2);
            break;
            
        case 2:
            instance_create(irandom(room_width), room_height, obj_melee2);
            break;
            
        case 3:
            instance_create(0, irandom(room_height), obj_melee2);
            break;
    }
}

repeat(ceil(cycle_day / 2))
{
    var r = irandom(3);
    
    switch(r)
    {
        case 0:
            instance_create(irandom(room_width), 0, obj_suicide1);
            break;
            
        case 1:
            instance_create(room_width, irandom(room_height), obj_suicide1);
            break;
            
        case 2:
            instance_create(irandom(room_width), room_height, obj_suicide1);
            break;
            
        case 3:
            instance_create(0, irandom(room_height), obj_suicide1);
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/// Count Enemy
enemy_number = instance_number(enemy);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
scr_softkey();

scr_mobGen(80, 15, 10);

scr_cycleSuf_reset();

/// Set Rescovery
if (chr_hp &lt; chr_hpMax)
{
    if (alarm[6] == -1)
    {
        alarm[6] = chr_rescoveryMax;
    }
}
else
{
    alarm[6] = 0;
}

/// Game Progress
if (game_progress &lt; game_progressMax)
{
    game_progress += 1 / room_speed;
}

/// Draw Reset
if (damage_alpha &gt; 0)
{
    damage_alpha -= 0.02;
}

if (hp_size &lt; 1)
{
    hp_size += 0.04;
}

/// Game Pause
if (keyboard_check_pressed(vk_backspace) || os_is_paused())
{
    instance_create(0, 0, sys_pause);
} 

/// DIE!           
if (chr_die)
{
    instance_create(0, 0, sys_die);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/// Free Memory
if (surface_exists(cycle_surface))
{
    surface_free(cycle_surface);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/// Draw Day Cycle
if (surface_exists(cycle_surface))
{
    draw_surface_ext(cycle_surface, 0, 0, 1, 1, 0, c_white, cycle_alpha);
}
else
{
    cycle_surface = surface_create(game_width, game_height);
    surface_set_target(cycle_surface);
    draw_clear_alpha(c_black, 0);
    surface_reset_target();
}

/// Draw Aim Line
draw_set_color(c_white);
draw_set_alpha(0.2);
draw_line_width((obj_chr.x - view_xview) / (view_wview / game_width) + lengthdir_x(50 / (view_wview / game_width), obj_chr.aim_dir + obj_chr.recoil), (obj_chr.y - view_yview) / (view_wview / game_width) + lengthdir_y(50 / (view_wview / game_width), obj_chr.aim_dir + obj_chr.recoil), (obj_chr.x - view_xview)  / (view_wview / game_width) + lengthdir_x(obj_chr.attack_range  / (view_wview / game_width), obj_chr.aim_dir + obj_chr.recoil), (obj_chr.y - view_yview)  / (view_wview / game_width) + lengthdir_y(obj_chr.attack_range  / (view_wview / game_width), obj_chr.aim_dir + obj_chr.recoil), 1.5);
draw_line_width((obj_chr.x - view_xview) / (view_hview / game_height) + lengthdir_x(50 / (view_hview / game_height), obj_chr.aim_dir - obj_chr.recoil), (obj_chr.y - view_yview) / (view_hview / game_height) + lengthdir_y(50 / (view_hview / game_height), obj_chr.aim_dir - obj_chr.recoil), (obj_chr.x - view_xview)  / (view_hview / game_height) + lengthdir_x(obj_chr.attack_range  / (view_hview / game_height), obj_chr.aim_dir - obj_chr.recoil), (obj_chr.y - view_yview)  / (view_hview / game_height) + lengthdir_y(obj_chr.attack_range  / (view_hview / game_height), obj_chr.aim_dir - obj_chr.recoil), 1.5);
draw_set_alpha(1);

/// Draw Damage
draw_set_color(c_red);
draw_set_alpha(damage_alpha);
draw_rectangle(0, 0, game_width, game_height, 0);
draw_set_alpha(1);

/// Draw JoyStick
draw_sprite_ext(spr_joystick, 0, stick_xpos, stick_ypos, 1, 1, 0, c_white, 0.07 + (stick_device == -1) * 0.1);
draw_sprite_ext(spr_joystick, 1, stick_xpos + stick_x, stick_ypos + stick_y, 1, 1, 0, c_white, 0.2 + (stick_device == -1) * 0.1);
draw_sprite_ext(spr_joystick, 2, stick_xposAtk, stick_yposAtk, 1, 1, 0, c_white, 0.07 + (stick_deviceAtk == -1) * 0.1);
draw_sprite_ext(spr_joystick, 3, stick_xposAtk + stick_xAtk, stick_yposAtk + stick_yAtk, 1, 1, 0, c_white, 0.2 + (stick_deviceAtk == -1) * 0.1);

/// Draw Skill
draw_sprite_ext(spr_skill, chr_class, skill_xpos, skill_ypos, 1, 1, 0, c_white, 0.8);

draw_set_valign(fa_middle);
draw_set_halign(fa_center);

if (obj_chr.alarm[7] != -1)
{
    draw_set_color(c_red);
    draw_set_alpha(1);
    draw_text(580, 145, obj_chr.alarm[7] div room_speed + 1); 
}

/// Draw HP
var grid = 40;
for(var i = 0; i &lt; chr_hp div 2; i += 1)
{
    /// Full
    if (chr_hp mod 2 == 0)
    {
        /// None Space
        draw_sprite_ext(spr_hp, 0, (game_width / 2) - (chr_hp / 4 * grid) + (grid * i) + (grid / 2),
        40, hp_size, hp_size, 0, c_white, hp_size);
    }
    else
    {
        /// Space
        draw_sprite_ext(spr_hp, 0, (game_width / 2) - ((chr_hp + 1) / 4 * grid) + (grid * i) + (grid / 2),
        40, hp_size, hp_size, 0, c_white, hp_size);
    }
    
    /// Half
    if (i == (chr_hp div 2) - 1 &amp;&amp; chr_hp mod 2 == 1)
    {
        draw_sprite_ext(spr_hp, 1, (game_width / 2) - ((chr_hp + 1) / 4 * grid) + (grid * i) + (grid * 1.5),
        40, hp_size, hp_size, 0, c_white, hp_size);
    }
}
if (chr_hp == 1)
{
    draw_sprite_ext(spr_hp, 1, game_width / 2, 40, hp_size, hp_size, 0, c_white, hp_size);
}

/// Draw Rescovery
rescovery_xpos += ((chr_rescoveryMax - alarm[6]) / chr_rescoveryMax * 120 * (chr_hp != chr_hpMax) - rescovery_xpos) / 10;
draw_sprite_ext(spr_recovery, 1, game_width / 2 + 70, 70, 1, 1, 0, c_white, (chr_hp != chr_hpMax) + (chr_hp == chr_hpMax) * rescovery_xpos);
draw_sprite_part_ext(spr_recoveryBar, 1, 0, 0, rescovery_xpos, 8, game_width / 2 - 65, 65, 1, 1, c_white, 1);

/// Draw Pause Button
draw_sprite_ext(spr_pause, 0, pause_xpos, pause_ypos, 1, 1, 0, c_white, 1);

/// Draw Day Text
var cycle_text;

if (cycle_day == 0)
{
    cycle_text = string(game_tryTotal) + " 번째 침공";
}
else if (cycle_day == cycle_dayMax)
{
    cycle_text = "FINAL";
}
else
{
    cycle_text = "DAY " + string(cycle_day + 1);
}

draw_set_color(c_white);
draw_set_alpha(cycle_textAlpha);
draw_text_transformed(game_width / 2, game_height / 2, cycle_text, 2, 2, 0);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
